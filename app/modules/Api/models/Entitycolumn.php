<?php
/**
 * Created by PhpStorm.
 * User: DELL
 * Date: 2019/5/6
 * Time: 22:32
 * Email: 574482856@qq.com
 */

defined('APP_PATH') OR exit('No direct script access allowed');

class EntitycolumnModel extends BaseModel {


  public $realDelete = TRUE;

  public function _init() {
    parent::_init(); // TODO: Change the autogenerated stub
  }

  /**
   * 第一次创建的时候，采用批量插入
   * @method saveMulti
   * @param $entityId
   * @param $insertData
   * @return string
   * 2019/5/11 17:16
   */
  public function saveMulti($entityId, $insertData) {

    if (!$insertData)
      return '';

    $data = array_map(function ($val) {
      return $this->autoAddtimeData($val, 'insert');
    }, $insertData);

    try {
      $this->startTransaction();

      //这个方法只能执行一次，如果存在列类型数据，再次调用此方法是直接返回的。
      $count = $this->getCount([getWhereCondition('entity_id', $entityId)], $this->table);
      if ($count) {
        return '';
      }

      //如果存在这其中的任意一个字段就返回
      $insertInputName = array_column($insertData, 'input_name');
      $existsTableColumnName = ['id', 'status', 'sort_id', 'updatetime', 'createtime'];

      if ($intersectData = array_intersect($insertInputName, $existsTableColumnName)) {
        showApiException('请更改字段名字，已经存在' . implode(',', $intersectData));
      }


      //清除所有 实体下所有的元素
      $this->query('delete from ' . $this->prefix . $this->table . ' where entity_id=?', [$entityId]);

      //创建数据库表
      $entityInfo = $this->entityModel->getOne($entityId, ['id', 'title', 'table_name', 'table_engine', 'commenttxt']);

      //如果表存在，删除
      $this->query('DROP TABLE IF EXISTS `' . $this->prefix . $entityInfo['table_name'] . '`;');

      //保存实体属性
      $ids = $this->_db->insertMulti($this->table, $data);

      $this->autoaddtime && debugMessage('未自动补充createtime和updatetime');
      $this->_logSql();

      $sqlCombineData = $this->dataCombine($insertData);

      //重新创建建 表 sql
      $insertSql = $this->getCreateTableSql($entityInfo, $sqlCombineData);

      $this->query($insertSql);

      $this->commit();
      if (!$ids)
        return '';
      else
        return implode(',', $ids);
    } catch (mysqli_sql_exception $exception) {
      $this->rollback();
      throw $exception;
    } catch (Exception $exception) {
      $this->rollback();
      throw $exception;
    }
  }

  /**
   * 创建表
   * @method getCreateTableSql
   * @param $entityInfo
   * @param $data
   * @return string
   * 2019/5/11 7:42
   */
  private function getCreateTableSql($entityInfo, $data) {

    if (!$data)
      return '';

    $sqlData = [];
    $sqlData[] = "CREATE TABLE {$this->prefix}{$entityInfo['table_name']}(";
    $sqlData[] = "`id` int unsigned NOT NULL AUTO_INCREMENT COMMENT '//id',";
    foreach ($data as $key => $attribute) {
      $sqlData[] = $this->parseAttributeSql($attribute) . ",";
    }
    $sqlData[] = "`status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '//状态 -1 删除 0 禁用  1正常',";
    $sqlData[] = "`sort_id` int(11) unsigned DEFAULT '0' COMMENT '排序id',";
    $sqlData[] = "`updatetime` int(11) NOT NULL,";
    $sqlData[] = "`createtime` int(11) NOT NULL DEFAULT '0' COMMENT '//创建时间 时间戳的方式',";
    $sqlData[] = "PRIMARY KEY (`id`)";
    $sqlData[] = ")ENGINE={$entityInfo['table_engine']} AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT='{$entityInfo['commenttxt']}';";

    return implode('', $sqlData);
  }


  /**
   * 组合数据,使用用户自定义数据，覆盖attribute属性
   * @method dataCombine
   * @param array $entityList
   * @return array|void
   * 2019/5/11 7:20
   */
  public function dataCombine(array $entityList) {

    if (!$entityList)
      return [];

    $entityList = arrayOrderby($entityList, 'attribute_id', SORT_ASC);

    //从属性列表中获取数据
    $attributeIds = [];
    foreach ($entityList as $key => $val) {
      if (isset($val['attribute_id']))
        $attributeIds[] = $val['attribute_id'];
    }

    $attrbuteList = $this->attributeModel->getAttributeListByIds($attributeIds);
    $attrbuteList = arrayOrderby($attrbuteList, 'id', SORT_ASC);
    $attrbuteList = array_combine(array_column($attrbuteList, 'id'), $attrbuteList);

    foreach ($entityList as $k => $value) {
      $entityList[$k] = array_merge(isset($attrbuteList[$value['attribute_id']]) ? $attrbuteList[$value['attribute_id']] : [], $value);
    }

    return $entityList;
  }

  /**
   * 根据属性得到修改属性的sql param
   * @method parseAttributeSql
   * @param $attribute
   * @return string
   * 2019/5/11 12:06
   */
  private function parseAttributeSql($attribute) {

    $data = [];
    isset($attribute['column_name']) || $attribute['column_name'] = $attribute['input_name'];

    $data[] = "`{$attribute['column_name']}`";
    $data[] = "{$attribute['column_type']}" . (strlen($attribute['column_value']) ? '(' . $attribute['column_value'] . ')' : '') . " ";

    if ($attribute['notnull'])
      $data[] = 'NOT NULL';

    if (in_array($attribute['column_type'], [1, 2, 3, 8, 9]))
      $data[] = 'default 0';

    if ($attribute['column_default'])
      $data[] = "default '{$attribute['column_default']}'";

    if ($attribute['commenttxt'])
      $data[] = "comment '{$attribute['commenttxt']}'";

    return trim(implode(' ', $data));
  }

  /**
   * 删除元素，均删除数据表中字段
   * @method entityColumnDelete
   * @param $entityId
   * @param $id
   * @return bool|int
   * @throws InvalideException
   * 2019/5/11 15:12
   */
  public function entityColumnDelete($entityId, $id) {

    //删除成功后，需要将表字段同时删除
    try {
      $this->startTransaction();

      $where = [
        getWhereCondition('entity_id', $entityId),
        getWhereCondition('id', $id)
      ];
      $columnAttribute = $this->getOne($where, ['attribute_id', 'input_name']);
      if (!$columnAttribute)
        return FALSE;

      $entityInfo = $this->entityModel->getOne($entityId, ['table_name']);

      if (!$entityInfo)
        return FALSE;


      if (in_array($columnAttribute['input_name'], $this->getFields($this->prefix . $entityInfo['table_name']))) {
        $dropColumnSql = 'alter table ' . $this->prefix . $entityInfo['table_name'] . ' drop column ' . $columnAttribute['input_name'] . ' ;';
        $this->query($dropColumnSql);
      }

      $result = $this->delete($id);

      $this->commit();

      return $result;

    } catch (mysqli_sql_exception $exception) {
      $this->rollback();
      throw $exception;
    }

  }

  public function updateColumn($entityId, $id, $data) {
    try {
      $this->startTransaction();

      $entityInfo = $this->entityModel->getOne($entityId, ['table_name']);

      if (!$entityInfo)
        return FALSE;

      $attributeInfo = $this->attributeModel->getAttributeListByIds([$data['attribute_id']]);

      if (!isset($attributeInfo[0]))
        return FALSE;

      $attributeInfo = $attributeInfo[0];

      $columnInfo = $this->getOne($id, ['input_name']);
      if (!$columnInfo) {
        return FALSE;
      }

      //修改表时候 只是修改表后边的描述信息，不能修改表字段名称  很危险.
      $attributeInfo['input_name'] = $columnInfo['input_name'];
      $attributeInfo['column_name'] = $columnInfo['input_name'];
      $attributeInfo['commenttxt'] = $data['commenttxt'];

      $columnInfo = $this->parseAttributeSql($attributeInfo);
      $addColumnSql = 'alter table ' . $this->prefix . $entityInfo['table_name'] . ' change `' . $attributeInfo['column_name'] . '` ' . $columnInfo . ' ;';

      $this->query($addColumnSql);
      $result = $this->update($id, $data);

      $this->commit();
      return $result;

    } catch (mysqli_sql_exception $exception) {
      $this->rollback();
      throw $exception;
    }
  }

  /**
   * 添加单个元素
   * @method addSignone
   * @param $entityId
   * @param $data
   * 2019/5/11 15:23
   */
  public function addSignone($entityId, $data) {

    try {
      $this->startTransaction();

      $entityInfo = $this->entityModel->getOne($entityId, ['table_name']);

      if (!$entityInfo)
        return FALSE;

      $attributeInfo = $this->attributeModel->getAttributeListByIds([$data['attribute_id']]);

      if (!isset($attributeInfo[0]))
        return FALSE;

      $attributeInfo = $attributeInfo[0];
      //创建表时候 将字段名字做个修改
      $attributeInfo['input_name'] = $data['input_name'];
      $attributeInfo['column_name'] = $data['input_name'];

      if (in_array($attributeInfo['column_name'], $this->getFields($this->prefix . $entityInfo['table_name']))) {
        showApiException($attributeInfo['column_name'] . '字段已经存在表中,请更换');
      }

      $columnInfo = $this->parseAttributeSql($attributeInfo);
      $addColumnSql = 'alter table ' . $this->prefix . $entityInfo['table_name'] . ' add column ' . $columnInfo . ' ;';
      $this->query($addColumnSql);

      $result = $this->insert($data);

      $this->commit();

      return $result;

    } catch (mysqli_sql_exception $exception) {
      $this->rollback();
      throw $exception;
    }
  }

  /**
   * 根据实体 查询出表结构对应的字段
   * @method getTableField
   * @param $entityId
   * @return array|bool
   * 2019/7/21 12:46
   */
  public function getTableField($entityId) {
    $entityInfo = $this->entityModel->getOne($entityId, ['table_name']);

    if (!$entityInfo)
      return FALSE;

    return $this->getFields($this->prefix . $entityInfo['table_name']);
  }


}