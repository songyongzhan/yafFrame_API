<?php
/**
 * Created by PhpStorm.
 * User: DELL
 * Date: 2019/5/15
 * Time: 23:22
 * Email: 574482856@qq.com
 */


defined('APP_PATH') OR exit('No direct script access allowed');

class AutomaticController extends ApiBaseController {


  protected $entityId;
  protected $strType = ['varchar', 'char', 'text'];

  public function init() {
    parent::init(); // TODO: Change the autogenerated stub
    $entityId = $this->_post('entity_id');

    if (!is_numeric($entityId))
      showApiException('实体id必须是数字');

    $this->entityId = $entityId;
  }

  public function getListAction() {
    //如果传递了page_size 就分页
    $page_size = $this->_post('page_size', PAGESIZE);
    $page_num = $this->_post('page_num', 1);

    $entityInfo = $this->getEntityInfo();

    $fields = $entityInfo['listcolumn'];

    $rules = $data = [];

    if ($entityInfo['searchcolumn']) {
      $column = $this->attributeService->getAttrbuteByColumn($entityInfo['searchcolumn']);
      $column = $column['result'];
      foreach ($column as $key => $val) {
        $data[] = $this->_post($val['title'], '');
        $rules[] = [
          'condition' => in_array($val['column_type'], $this->strType) ? 'like' : '=',
          'key_field' => $val['column_name'],
          'db_field' => $val['column_name']
        ];
      }
    }
    $where = $this->where($rules, $this->filterData($data));

    $result = $this->automaticService->getListPage($where, $page_num, $page_size, $this->entityId, $fields);
    return $result;
  }

  public function addAction() {
    $data = $this->getData();
    $result = $this->automaticService->add($data, $this->entityId);
    return $result;
  }


  public function updateAction() {
    $id = $this->_post('id');
    $data = $this->getData();
    $result = $this->automaticService->update($id, $data, $this->entityId);
    return $result;
  }


  public function getOneAction() {
    $id = $this->_post('id');
    $fields = $this->_post('field', '*');
    $result = $this->automaticService->getOne($id, $this->entityId, $fields);
    return $result;
  }

  public function deleteAction() {
    $id = $this->_post('id');
    $result = $this->automaticService->delete($id, $this->entityId);
    return $result;
  }

  /**
   * 获取参数
   * @method getParam
   * @return array
   * 2019/5/10 6:49
   */
  private function getData($entityId = 0) {

    if (!$entityId)
      $entityId = $this->entityId;

    $list = $this->entitycolumnService->getviewlist($entityId);
    $data = [];

    foreach ($list as $key => $val) {
      $data[$val['column_name']] = $this->_post($val['column_name'], '');
    }

    return $data;
  }


  /**
   * 获取实体详情
   * @method getEntityInfo
   * @return mixed
   * 2019/5/15 23:35
   */
  private function getEntityInfo() {
    return $this->entityService->getOne($this->entityId);
  }

  /**
   * 用于显示列表页
   * @method getViewColumn
   * @return array
   * @throws InvalideException
   * 2019/5/15 23:36
   */
  private function getViewColumn() {
    return $this->entitycolumnService->getviewlist($this->entityId);
  }


}